from typing import Dict, List
import re
import logging
from utils.diff_parser import FileDiff

logger = logging.getLogger(__name__)

class VulnerabilityScanner:
    """Scanner for detecting security vulnerabilities in code."""
    
    def __init__(self):
        self.vulnerability_patterns = self._load_vulnerability_patterns()
        
    async def scan(self, diffs: Dict[str, FileDiff]) -> List[Dict]:
        """Scans code diffs for security vulnerabilities."""
        vulnerabilities = []
        
        for filename, content in diffs.items():
            file_vulnerabilities = await self._scan_content(filename, content)
            vulnerabilities.extend(file_vulnerabilities)
            
        return vulnerabilities
        
    def _load_vulnerability_patterns(self) -> Dict:
        """Loads known vulnerability patterns."""
        # Using the same patterns defined in SecurityAgent
        return {
            "hardcoded_secrets": r"(?i)(password|secret|key|token|api_key).*?['\"]([^'\"]+)['\"]",
            "sql_injection": r"(?i)(execute|raw|cursor\.execute).*?\+",
            "xss_vulnerable": r"(?i)innerHTML|document\.write\(",
            "insecure_crypto": r"(?i)(md5|sha1)\(",
            "command_injection": r"(?i)(exec|eval|system|popen)\("
        }
        
    async def _scan_content(self, filename: str, diff_content: FileDiff) -> List[Dict]:
        """Scans a single file's content for vulnerabilities."""
        vulnerabilities = []
        
        for vuln_type, pattern in self.vulnerability_patterns.items():
            matches = re.finditer(pattern, diff_content.content)
            for match in matches:
                vulnerabilities.append({
                    'type': vuln_type,
                    'file': filename,
                    'line': diff_content.content[:match.start()].count('\n') + 1,
                    'severity': 'HIGH' if vuln_type in ["hardcoded_secrets", "command_injection"] else "MEDIUM",
                    'description': f'Potential {vuln_type.replace("_", " ")} vulnerability detected'
                })
                
        return vulnerabilities 